<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matchs du Jour</title>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js"></script>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; background-color: #f4f4f4; color: #333; }
        h1 { background-color: #007bff; color: white; padding: 10px; border-radius: 5px; }
        .container { width: 80%; margin: auto; }
        input { width: 100%; padding: 10px; margin: 10px 0; border-radius: 5px; }
        .match { border: 1px solid #ddd; padding: 10px; margin: 10px; border-radius: 5px; background-color: #e9ecef; position: relative; }
        .match strong { color: #007bff; }
        h2 { color: #007bff; }
        .match-time { color: #28a745; font-weight: bold; margin-left: 10px; }
        .highlight { background-color: #ffd700; }
        .live { color: red; font-weight: bold; }
        .live-indicator {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <h1>Matchs du Jour</h1>
    <input type="text" id="search" placeholder="Rechercher un pays ou une √©quipe..." onkeyup="filterMatches()">
    
    <div id="highlighted-matches" class="container"></div>
    <hr>
    <div id="all-matches" class="container"></div>

    <script>
        const API_KEY = "3d29229c54c3780154da7295eadf5038";
        const API_URL = "https://v3.football.api-sports.io/fixtures?date=" + new Date().toISOString().split('T')[0];

        const topLeagues = [39, 140, 78, 135, 61]; // 5 grands championnats
        const allLeagues = [2, 3, 848]; // Autres ligues europ√©ennes importantes

        const countryTranslations = {
            "England": "Angleterre",
            "Spain": "Espagne",
            "Germany": "Allemagne",
            "Italy": "Italie",
            "France": "France",
            "World": "Europe"
        };

        fetch(API_URL, {
            method: "GET",
            headers: { "x-apisports-key": API_KEY }
        })
        .then(response => response.json())
        .then(data => {
            const highlightedDiv = document.getElementById("highlighted-matches");
            const allMatchesDiv = document.getElementById("all-matches");
            let highlightedMatches = "";
            let allMatches = "";
            
            data.response.forEach(match => {
                const country = countryTranslations[match.league.country] || match.league.country;
                const matchDate = new Date(match.fixture.date);
                const matchTime = matchDate.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
                const isLive = match.fixture.status.short === "1H" || match.fixture.status.short === "2H";
                const liveIndicator = isLive ? `<span class="live-indicator"></span>` : "";
                const liveText = isLive ? `<span class="live">${match.fixture.status.elapsed}' - ${match.goals.home} : ${match.goals.away}</span>` : `<span class="match-time">${matchTime}</span>`;
                
                const matchHTML = `
                    <div class="match ${topLeagues.includes(match.league.id) ? 'highlight' : ''}">
                        ${liveIndicator}<strong>${match.teams.home.name}</strong> vs <strong>${match.teams.away.name}</strong> - ${match.league.name}  
                        ${liveText}
                    </div>
                `;
                
                if (topLeagues.includes(match.league.id)) {
                    highlightedMatches += matchHTML;
                } else {
                    allMatches += matchHTML;
                }
            });
            
            highlightedDiv.innerHTML = `<h2>üèÜ Comp√©titions Mises en Avant</h2>` + highlightedMatches;
            allMatchesDiv.innerHTML = `<h2>üìÖ Tous les Matchs</h2>` + allMatches;
        })
        .catch(error => console.error("Erreur lors de la r√©cup√©ration des matchs:", error));

        function filterMatches() {
            const searchValue = document.getElementById("search").value.toLowerCase();
            document.querySelectorAll(".match").forEach(match => {
                match.style.display = match.innerText.toLowerCase().includes(searchValue) ? "block" : "none";
            });
        }
    </script>
</body>
</html>
